// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Realization.DBModels;

public partial class officeContext : DbContext
{
    public officeContext()
    {
    }

    public officeContext(DbContextOptions<officeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Availableday> Availabledays { get; set; }

    public virtual DbSet<Dayoff> Dayoffs { get; set; }

    public virtual DbSet<Holiday> Holidays { get; set; }

    public virtual DbSet<Medical> Medicals { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<TaskYt> TaskYts { get; set; }

    public virtual DbSet<User> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseNpgsql("Host=localhost;Database=office;Username=postgres;Password=123;Persist Security Info=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Availableday>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("availabledays");

            entity.Property(e => e.Dates).HasColumnName("dates");
            entity.Property(e => e.Fio)
                .HasMaxLength(255)
                .HasColumnName("fio");
        });

        modelBuilder.Entity<Dayoff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("dayoff_pkey");

            entity.ToTable("dayoff");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.Dateapp)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dateapp");
            entity.Property(e => e.Datecreate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datecreate");
            entity.Property(e => e.Isapp).HasColumnName("isapp");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.User).WithMany(p => p.Dayoffs)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("fk_dayoff_user");
        });

        modelBuilder.Entity<Holiday>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("holiday_pkey");

            entity.ToTable("holiday");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Dateapp)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dateapp");
            entity.Property(e => e.Datecreate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datecreate");
            entity.Property(e => e.Dateend)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dateend");
            entity.Property(e => e.Datestart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datestart");
            entity.Property(e => e.Isappadmin).HasColumnName("isappadmin");
            entity.Property(e => e.Isappdirect).HasColumnName("isappdirect");
            entity.Property(e => e.Ispay).HasColumnName("ispay");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.User).WithMany(p => p.Holidays)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("fk_holiday_user");
        });

        modelBuilder.Entity<Medical>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("medical_pkey");

            entity.ToTable("medical");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Datecreate)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datecreate");
            entity.Property(e => e.Dateend)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("dateend");
            entity.Property(e => e.Datestart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datestart");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.User).WithMany(p => p.Medicals)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("fk_medical_user");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("post_pkey");

            entity.ToTable("post");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Description).HasColumnName("description");
            entity.Property(e => e.Salary).HasColumnName("salary");
        });

        modelBuilder.Entity<TaskYt>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("task_pkey");

            entity.ToTable("taskYT");

            entity.Property(e => e.Id)
                .HasDefaultValueSql("nextval('task_id_seq'::regclass)")
                .HasColumnName("id");
            entity.Property(e => e.Date)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("date");
            entity.Property(e => e.Key)
                .HasMaxLength(50)
                .HasColumnName("key");
            entity.Property(e => e.Time).HasColumnName("time");
            entity.Property(e => e.Userid).HasColumnName("userid");

            entity.HasOne(d => d.User).WithMany(p => p.TaskYts)
                .HasForeignKey(d => d.Userid)
                .HasConstraintName("fk_task_user");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("users_pkey");

            entity.ToTable("users");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Datebirth)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datebirth");
            entity.Property(e => e.Datestart)
                .HasColumnType("timestamp without time zone")
                .HasColumnName("datestart");
            entity.Property(e => e.Fio)
                .HasMaxLength(255)
                .HasColumnName("fio");
            entity.Property(e => e.Password).HasColumnName("password");
            entity.Property(e => e.Postid).HasColumnName("postid");
            entity.Property(e => e.Telegramid).HasColumnName("telegramid");

            entity.HasOne(d => d.Post).WithMany(p => p.Users)
                .HasForeignKey(d => d.Postid)
                .HasConstraintName("fk_post_user");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}